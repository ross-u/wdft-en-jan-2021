{"version":3,"sources":["lib/project-services.js","components/projects/AddProject.js","components/projects/ProjectList.js","components/navbar/Navbar.js","components/projects/EditProject.js","lib/task-services.js","components/tasks/AddTask.js","components/projects/ProjectDetails.js","components/tasks/TaskDetails.js","App.js","serviceWorker.js","index.js"],"names":["projects","this","api","axios","create","baseURL","process","withCredentials","get","then","data","id","newProject","post","projectData","put","delete","AddProject","props","handleFormSubmit","event","preventDefault","state","title","description","project","addProject","getData","setState","catch","err","console","log","handleChange","target","name","value","onSubmit","type","onChange","e","Component","ProjectList","listOfProjects","getAllProjects","projectAPI","map","key","_id","className","to","navbar","EditProject","theProject","updateProject","history","push","taskService","projectId","taskId","task","AddTask","projectID","tasks","addTask","getTheProject","error","toggleForm","isShowing","onClick","placeholder","ProjectDetails","renderEditForm","getSingleProject","renderAddTaskForm","deleteProject","match","params","getProjectById","length","TaskDetails","getTheTask","getTaskById","theTask","goBack","App","Navbar","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5ec1b2c1.chunk.js","sourcesContent":["import axios from \"axios\";\n\nclass ProjectService {\n  constructor() {\n    this.api = axios.create({\n      baseURL: process.env.REACT_APP_API_URL,\n      withCredentials: true\n    });\n  }\n\n  getAllProjects() {\n    return this.api.get(`/api/projects`).then(({ data }) => data);\n  }\n\n  getProjectById(id) {\n    return this.api.get(`/api/projects/${id}`).then(({ data }) => data);\n  }\n\n  addProject(newProject) {\n    return this.api.post(`/api/projects`, newProject).then(({ data }) => data);\n  }\n\n  updateProject(id, projectData) {\n    return this.api\n      .put(`/api/projects/${id}`, projectData)\n      .then(({ data }) => data);\n  }\n\n  deleteProject(id) {\n    return this.api.delete(`/api/projects/${id}`).then(({ data }) => data);\n  }\n}\n\nlet projects = new ProjectService();\n\nexport default projects;\n","// components/projects/AddProject.js\n\nimport React, { Component } from 'react';\nimport project from './../../lib/project-services'\n\nclass AddProject extends Component {\n  constructor(props){\n      super(props);\n      this.state = { title: \"\", description: \"\" };\n  }\n   \n  handleFormSubmit = (event) => {\n    event.preventDefault();\n    const {title, description } = this.state;\n    \n    project.addProject({ title, description })\n      .then( () => {\n        this.props.getData();\n        this.setState({title: \"\", description: \"\"});\n      })\n      .catch( (err) => console.log(err) )\n  }\n\n\n  handleChange = (event) => {  \n    const {name, value} = event.target;\n    this.setState( {[name]: value} );\n  }\n\n  render(){\n    return(\n      <div>\n        <form onSubmit={this.handleFormSubmit}>\n          \n          <label>Title:</label>\n          <input type=\"text\" \n            name=\"title\" \n            value={this.state.title} \n            onChange={ (e) => this.handleChange(e) }/>\n          \n          <label>Description:</label>\n          <textarea name=\"description\" \n            value={this.state.description} \n            onChange={ (e) => this.handleChange(e) } />\n          \n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default AddProject;","// components/projects/ProjectList.js\n\nimport React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport projectAPI from \"./../../lib/project-services\";\n\nimport AddProject from \"./AddProject\"; // <== !!!\n\nclass ProjectList extends Component {\n  state = {\n    listOfProjects: [],\n  };\n\n  getAllProjects = () => {\n    //  axios.get(process.env.REACT_APP_API_URL + '/api/projects')\n    projectAPI.getAllProjects().then((data) => {\n      this.setState({ listOfProjects: data });\n    });\n  };\n\n  componentDidMount() {\n    //  fetch the data from API befor initial render\n    this.getAllProjects();\n  }\n\n  render() {\n    const { listOfProjects } = this.state;\n\n    return (\n      <div>\n        {\" \"}\n        {/* After adding a projects,we will GET all projects again from API  */}\n        <AddProject getData={this.getAllProjects} />\n        <div>\n          {listOfProjects.map((project) => {\n            return (\n              <div key={project._id} className=\"project\">\n                <Link to={`/projects/${project._id}`}>\n                  <h3>{project.title}</h3>\n                  <p>{project.description} </p>\n                </Link>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ProjectList;\n","// components/navbar/Navbar.js\n\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst navbar = () => {\n  return (\n    <nav className=\"nav-style\">\n      <ul>\n        <li>\n          <Link to=\"/projects\">\n            Projects\n          </Link>\n        </li>\n      </ul>\n    </nav>\n  )\n}\n\nexport default navbar;","// components/projects/EditProject.js\n\nimport React, { Component } from 'react';\nimport project from './../../lib/project-services';\n\n\nclass EditProject extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      title: this.props.theProject.title, \n      description: this.props.theProject.description\n    }\n  }\n    \n  handleFormSubmit = (event) => {\n    event.preventDefault();\n    const { title, description } = this.state;\n    const { _id } = this.props.theProject;\n  \n    project.updateProject(_id,{ title, description })\n    .then( () => {\n      this.props.history.push('/projects');    \n    })\n     .catch( (err) => console.log(err) )\n  }\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n    this.setState({ [name]: value })\n\n  }\n\n  render(){\n    return (\n      <div>\n        <form onSubmit={this.handleFormSubmit}>\n          \n          <label>Title:</label>\n          <input type=\"text\"\n            name=\"title\" \n            value={this.state.title} \n            onChange={this.handleChange}/>\n          \n          <label>Description:</label>\n          <textarea name=\"description\" \n            value={this.state.description} \n            onChange={this.handleChange} />\n          \n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default EditProject;","import axios from \"axios\";\n\nclass TaskService {\n  constructor() {\n    this.api = axios.create({\n      baseURL: process.env.REACT_APP_API_URL,\n      withCredentials: true\n    });\n  }\n\n  getTaskById(projectId, taskId) {\n    return this.api\n      .get(`/api/projects/${projectId}/tasks/${taskId}`)\n      .then(({ data }) => data);\n  }\n\n  addTask(task) {\n    return this.api.post(`/api/tasks`, task).then(({ data }) => data);\n  }\n}\n\nlet taskService = new TaskService();\n\nexport default taskService;\n","// components/tasks/AddTask.js\n\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport tasks from './../../lib/task-services'\n\nclass AddTask extends Component {\n  constructor(props){\n    super(props);\n    this.state = { title: '', description: '', isShowing: false};\n  }\n   \n  handleFormSubmit = (event) => {\n    event.preventDefault();\n    const { title, description } = this.state;\n    const { projectID } = this.props; \n                                                \n    tasks.addTask({ title, description, projectID })\n      .then( () => {\n        this.props.getTheProject();\n        this.setState({title: '', description: ''});\n    })\n    .catch( error => console.log(error) )\n  }\n  \n  toggleForm = () => this.setState({isShowing: !this.state.isShowing});\n\n  handleChange = (event) => {  \n    const {name, value} = event.target;\n    this.setState({[name]: value});\n  }\n\n  render(){\n    return(\n      <div>\n        <button onClick={this.toggleForm}> Add task </button>\n\n        {\n          !this.state.isShowing ?\n           null\n          :\n          (<div>\n            <form>\n              <input type=\"text\" placeholder='Title'\n                name=\"title\" value={this.state.title}\n                onChange={ (e) => this.handleChange(e)}/>\n              \n              <input name=\"description\" placeholder='Description'\n                value={this.state.description}\n                onChange={ (e) => this.handleChange(e)} />\n              \n              <button onClick={this.handleFormSubmit}>Submit</button>\n            </form>\n          </div>)\n        }\n      </div>\n    )\n  }\n}\n\nexport default AddTask;","// components/projects/ProjectDetails.js\n\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport EditProject from './EditProject';\nimport AddTask from './../tasks/AddTask';\nimport project from './../../lib/project-services';\n\n\nclass ProjectDetails extends Component {\n  constructor(props){\n    super(props);\n    this.state = {title: '', description: '', tasks: []};\n  }\n  \n  renderEditForm = () => {\n    /* Check if `renderEditForm` is triggered before the state gets populated. \n     If the state is empty nothing can be passed to `EditProject` as the\n    value in `theProject` prop to populate the form  */\n    if (!this.state.title && !this.state.description) return <p>LOADING</p>; \n    else {\n      return (\n        <EditProject theProject={this.state}\n          getTheProject={this.getSingleProject} \n          {...this.props} /> \n       // {...this.props}  so that we can use 'this.props.history' in EditProject  \n      )      \n    }\n  }\n\n  renderAddTaskForm = () => {\n    if(!this.state.title && !this.state.description) return  <p>LOADING</p>; \n    else {\n      return <AddTask projectID={this.state._id} getTheProject={this.getSingleProject}/>\n    }\n  }\n\n  deleteProject = () => {\n    const { id } = this.props.match.params;\n    \n    project.deleteProject(id)\n    \t.then( () => this.props.history.push('/projects') )\n    \t.catch( (err) => console.log(err));\n  }\n\n\n  componentDidMount() {\n    this.getSingleProject();\n  }\n\n  getSingleProject = () => {\n    const { id } = this.props.match.params;\n  \n    project.getProjectById(id)\n      .then( (data) =>{\n        const theProject = data;\n        this.setState(theProject);\n      })\n      .catch((err) => console.log(err));\n  }\n  \n  render() {\n    return (\n      <div>\n        <h1>{this.state.title}</h1>\n        <h4>{this.state.description}</h4>\n        <Link to={'/projects'}>\n          <button>Back</button>\n        </Link>\n\n        { this.renderEditForm() }   {/* Render the form in here */}\n        <button onClick={() => this.deleteProject()}>\n    \t    Delete project\n  \t    </button>\n\n        { this.renderAddTaskForm() }\n\n        { \n          (this.state.tasks.length === 0) ?\n          <h2>NO TASKS TO DISPLAY</h2>\n          :\n           this.state.tasks.map((task) => {\n            return(\n              <Link key={task._id} to={`/projects/${this.state._id}/tasks/${task._id}`}>\n                 <h2 className='task'>{ task.title }</h2>\n               </Link>\n            )\n            \n        })\n      }\n\n      </div>\n    )\n  }\n}\n\nexport default ProjectDetails;","// components/tasks/TaskDetails.js\n\nimport React, { Component } from 'react';\nimport tasks from './../../lib/task-services'\n\n\nclass TaskDetails extends Component {\n\tstate = {};\n\n  componentDidMount(){\n    this.getTheTask();\n  }\n\n  getTheTask = () => {\n    const { id: projectId, taskId } = this.props.match.params;\n\n    tasks.getTaskById(projectId, taskId)\n    \t.then( (theTask) => {\n      \tthis.setState(theTask);\n    })\n    .catch( (err) => console.log(err))\n  }\n\n  render(){\n    return(\n      <div>\n        <h3>TASK DETAILS</h3>\n        <h2>{this.state.title}</h2>\n        <p>{this.state.description}</p>\n\n        {/* To go back we can use react-router-dom method `history.goBack()` available on `props` object */}\n        <button onClick={this.props.history.goBack} >Go Back</button>\n      </div>\n    )\n  }\n}\n\nexport default TaskDetails;","//\tsrc/App.js\nimport React, { Component } from 'react';\nimport './App.css';\nimport { Switch, Route } from 'react-router-dom';\n\nimport ProjectList from './components/projects/ProjectList';\nimport Navbar from './components/navbar/Navbar';\nimport ProjectDetails from './components/projects/ProjectDetails';\nimport TaskDetails from './components/tasks/TaskDetails'\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar />\n\n        <Switch>\n          <Route exact path=\"/projects\" component={ProjectList}/>\n          <Route exact path=\"/projects/:id\" component={ProjectDetails} />\n          <Route exact path=\"/projects/:id/tasks/:taskId\" component={TaskDetails} /> \n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render((\n<Router> \n    <App />\n</Router> \n), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}